// Importaciones necesarias
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;

@EnableWebFluxSecurity
public class SecurityConfig {

    // Configuración de seguridad
    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
        return http
            .csrf(x).disable(x)
            .authorizeExchange(x)
            .pathMatchers("/api/public/**").permitAll(yes)
            .pathMatchers("/api/secure/**").authenticated()
            .and(x).build(x);
    }

    // Más configuración para manejo de JWT...
}

// Clase para manejar la autenticación y generación de JWT
public class JWTUtil {
    // Métodos para crear y validar tokens JWT
}

// Clase para manejar el proceso de autenticación
public class AuthenticationManager {
    // Métodos para autenticar usuarios
}
            - nombre: Acción de seguridad de salsa
  # Puedes fijar la confirmación exacta o la versión.
  # usos: saucelabs/sauce-security-action@5008ddffb96db501fc71486cad3950304a73a2d5
  usos: saucelabs/sauce-security-action@v0.3.0
  con:
    # Nombre de usuario de Sauce Labs.
    nombre de usuario:
    # Clave API de Sauce Labs.
    llave de acceso:
    # URL de la aplicación bajo prueba.
    objetivo:
    # Una URL a una especificación de OpenAPI para ayudar a escanear la API completa.
    openapi: # opcional
    # Una URL a un esquema Graphql para ayudar a escanear la API completa.
    Graphql: # opcional
    # Cantidad de vulnerabilidades graves que se permite descubrir; si se establece en "-1", se ignorarán. (Predeterminado: 0)
    permitidaVulnerabilidades severas: # opcional, el valor predeterminado es 0
    # Cantidad de vulnerabilidades medianas que se permite descubrir; si se establece en "-1", se ignorarán. (Predeterminado: 0)
    AllowMediumVulnerabilidades: # opcional, el valor predeterminado es 0
    # Cantidad de vulnerabilidades bajas que se pueden descubrir; si se establece en "-1", se ignorarán. (Predeterminado: 0)
    AllowLowVulnerabilitties: # opcional, el valor predeterminado es 0
    # Cantidad de vulnerabilidades informativas que se permite descubrir; si se establece en "-1", se ignorarán. (Predeterminado: 0)
    Vulnerabilidades informativas permitidas: # opcional, el valor predeterminado es -1
    # Si se establece en verdadero, esta acción descargará informes de Zap para que los adjunte al trabajo mediante acciones/cargar-artefacto
    descargar informes: # opcional
    # Si se establece en verdadero, esta acción descargará todos los recursos del trabajo de Sauce Labs para que usted pueda adjuntarlos al trabajo a través de acciones/cargar-artefacto.
    descargarJobAssets: # opcional
          

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# APIsec addresses the critical need to secure APIs before they reach production.
# APIsec provides the industry’s only automated and continuous API testing platform that uncovers security vulnerabilities and logic flaws in APIs.
# Clients rely on APIsec to evaluate every update and release, ensuring that no APIs go to production with vulnerabilities.

# How to Get Started with APIsec.ai
# 1. Schedule a demo at https://www.apisec.ai/request-a-demo .
#
# 2. Register your account at https://cloud.apisec.ai/#/signup .
#
# 3. Register your API . See the video (https://www.youtube.com/watch?v=MK3Xo9Dbvac) to get up and running with APIsec quickly.
#
# 4. Get GitHub Actions scan attributes from APIsec Project -> Configurations -> Integrations -> CI-CD -> GitHub Actions
#
# apisec-run-scan
#
# This action triggers the on-demand scans for projects registered in APIsec.
# If your GitHub account allows code scanning alerts, you can then upload the sarif file generated by this action to show the scan findings.
# Else you can view the scan results from the project home page in APIsec Platform.
# The link to view the scan results is also displayed on the console on successful completion of action.

# This is a starter workflow to help you get started with APIsec-Scan Actions

name: APIsec

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "Principal" branch
  # Customize trigger events based on your DevSecOps processes.
  push:
    branches: [ "Principal", "Main" ]
  pull_request:
    branches: [ "Principal" ]
  schedule:
    - cron: '21 8 * * 4'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


permissions:
  contents: read

jobs:

  Trigger_APIsec_scan:
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest

    steps:
       - name: APIsec scan
         uses: apisec-inc/apisec-run-scan@025432089674a28ba8fb55f8ab06c10215e772ea
         with:
          # The APIsec username with which the scans will be executed
          apisec-username: ${{ secrets.apisec_username }}
          # The Password of the APIsec user with which the scans will be executed
          apisec-password: ${{ secrets.apisec_password}}
          # The name of the project for security scan
          apisec-project: "VAmPI"
          # The name of the sarif format result file The file is written only if this property is provided.
          sarif-result-file: "apisec-results.sarif"
       - name: Import results
         uses: github/codeql-action/upload-sarif@v2
         with:
          sarif_file: ./apisec-results.sarif
